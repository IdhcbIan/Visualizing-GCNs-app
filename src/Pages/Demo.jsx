import React from 'react';
import styled, { createGlobalStyle } from 'styled-components';
import { motion, AnimatePresence } from 'framer-motion';
import Header from '../Legos/Header';
import Renderer from './Visual/Renderer';

const GlobalStyle = createGlobalStyle`
  // Global styles inherited from other components
`;

const PageContainer = styled(motion.div)`
  background-color: #f5f7fa;
  min-height: 100vh;
`;

const VisualizationSection = styled.section`
  padding: 1.5rem;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  margin: 1.5rem;
  
  @media (max-width: 768px) {
    padding: 0.75rem;
    margin: 0.75rem;
  }
`;

const ExplanationSection = styled.section`
  padding: 1.5rem;
  background-color: white;
  border-radius: 8px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  margin: 1.5rem;
  
  @media (max-width: 768px) {
    padding: 0.75rem;
    margin: 0.75rem;
  }
`;

const SectionTitle = styled.h2`
  color: #2a3b4c;
  font-size: 2rem;
  font-family: 'Unna', serif;
  margin-top: 0;
  margin-bottom: 1.5rem;
  position: relative;
  
  &:after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 60px;
    height: 3px;
    background-color: #4287f5;
  }
`;

const ExplanationText = styled.p`
  color: #4a5568;
  line-height: 1.8;
  font-size: 1.1rem;
  margin-bottom: 1.5rem;
`;

const FeatureList = styled.ul`
  list-style-type: none;
  padding: 0;
  margin: 1.5rem 0;
`;

const FeatureItem = styled.li`
  color: #4a5568;
  line-height: 1.8;
  font-size: 1.1rem;
  margin-bottom: 1rem;
  padding-left: 1.5rem;
  position: relative;
  
  &:before {
    content: 'â€¢';
    color: #4287f5;
    font-size: 1.5rem;
    position: absolute;
    left: 0;
    top: -0.2rem;
  }
`;

const Demo = () => {
  return (
    <>
      <GlobalStyle />
      <AnimatePresence mode="wait">
        <PageContainer
          key="demo-page"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
        >
          <Header />
          
          <VisualizationSection>
            <SectionTitle>Interactive Graph Visualization(AlexNet)</SectionTitle>
            <Renderer />
          </VisualizationSection>
          
          <ExplanationSection>
            <SectionTitle>Understanding the Visualization</SectionTitle>
            <ExplanationText>
              This interactive visualization demonstrates a K-Nearest Neighbors (KNN) graph based on embeddings 
              generated by a Graph Convolutional Network (GCN). Each node represents a data point, and edges 
              connect to its nearest neighbors according to the similarity in the embedding space.
            </ExplanationText>
            
            <ExplanationText>
              The visualization helps to understand how the neural network organizes and clusters similar items 
              in the embedding space, revealing patterns and relationships that might not be apparent in the raw data.
            </ExplanationText>
            
            <SectionTitle>Key Features</SectionTitle>
            <FeatureList>
              <FeatureItem>
                <strong>Adjustable K value:</strong> Change the number of connections per node to explore different 
                levels of connectivity in the graph.
              </FeatureItem>
              <FeatureItem>
                <strong>Interactive navigation:</strong> Zoom in/out and pan to explore different regions of the graph.
              </FeatureItem>
              <FeatureItem>
                <strong>Node inspection:</strong> Hover over nodes to see detailed information about each data point.
              </FeatureItem>
              <FeatureItem>
                <strong>Force-directed layout:</strong> The graph automatically arranges itself to minimize edge 
                crossings and reveal the underlying structure of the data.
              </FeatureItem>
            </FeatureList>
            
            <ExplanationText>
              This visualization is particularly useful for understanding how different neural network architectures 
              organize data in their latent spaces, and how changes in model parameters affect the resulting embeddings.
            </ExplanationText>
          </ExplanationSection>
        </PageContainer>
      </AnimatePresence>
    </>
  );
};

export default Demo;
